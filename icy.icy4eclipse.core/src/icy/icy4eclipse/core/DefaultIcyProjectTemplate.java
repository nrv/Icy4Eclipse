/*
 * Copyright 2011 Nicolas Hervé.
 * 
 * This file is part of Icy4Eclipse.
 * 
 * Icy4Eclipse is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Icy4Eclipse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Icy4Eclipse. If not, see <http://www.gnu.org/licenses/>.
 */

package icy.icy4eclipse.core;

import java.util.List;

import org.eclipse.jdt.core.IClasspathEntry;

/**
 * @author Nicolas Hervé - n.herve@laposte.net
 * 
 */
public class DefaultIcyProjectTemplate implements IcyProjectTemplate {
	@Override
	public String getPluginMainClassImplementation(String pluginName, String packageName, String className) {
		StringBuffer javaFile = new StringBuffer();
		javaFile.append("package " + packageName + ";\n");
		javaFile.append("\n");
		javaFile.append("import icy.gui.dialog.MessageDialog;\n");
		javaFile.append("import icy.plugin.abstract_.Plugin;\n");
		javaFile.append("import icy.plugin.interface_.PluginImageAnalysis;\n");
		javaFile.append("\n");
		javaFile.append("public class "+className+" extends Plugin implements PluginImageAnalysis {\n");
		javaFile.append("\n");
		javaFile.append("\t@Override\n");
		javaFile.append("\tpublic void compute() {\n");
		javaFile.append("\t\t// TODO Auto-generated by Icy4Eclipse\n");
		javaFile.append("\t\tMessageDialog.showDialog(\""+pluginName+" is working fine !\");\n");
		javaFile.append("\t}\n");
		javaFile.append("\n");
		javaFile.append("}\n");
		
		return javaFile.toString();
	}

	@Override
	public String getTemplateName() {
		return "Default";
	}

	@Override
	public String getTemplateDescription() {
		return "create a default plugin";
	}

	@Override
	public List<IClasspathEntry> getSpecificClasspathEntries() {
		return null;
	}

}
